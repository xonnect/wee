(define x (u8vector 2 3 4))
(define y '#u8(6 7 8))
(define z (make-u8vector 3 7))
(display (+ (u8vector-ref x 2) 2))
(display (u8vector-length x))
(display "\n")
(display (u8vector-ref y 2))
(display (u8vector-length y))
(display "\n")
(u8vector-set! z 2 5)
(display (u8vector-ref z 2))
(display (u8vector-length z))
(display "\n")
(display (equal? '#u8(0 1 2) '#u8(0 1 2)))
(display (equal? '#u8(0 1 2) '#u8(0 1 3)))
(display (equal? '#u8(0 1 2) (u8vector 0 1 2)))
(display (equal? (u8vector 0 1 2) (u8vector 0 1 2)))
(display "\n")
